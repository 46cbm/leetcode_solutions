# 例6_是否为同一BST

**题目描述：**

```

```

**输入：**

```
开始一个数n（1 <= n <= 20）表示有n输入需要判断。n=0时结束。
接下来一行是一个用于比较的初始树。接下来输入n行，每行一棵树，和初始树进行比较。
序列长度小于10，包含一位0-9的数字。
没有重复的数字。
```

**输出：**

```
相同输出YES，不同输出NO。
```

**输入样例：**

```
2
567432
543267
576342
0
```

**输出样例：**

```
YES
NO
```



**思路：**

```
对每行输入建立一个二叉树，进行先序和中序遍历，并保存遍历顺序。
对遍历顺序进行比较。相同则树相同
```



**代码：**

```c++
#include<stdio.h>
#include<string>
using namespace std;

struct Node {
	Node *lchild;
	Node *rchild;
	int c;
}Tree[110];
int loc;

Node *create() {
	Tree[loc].lchild = Tree[loc].rchild = NULL;
	return &Tree[loc++];
}

char str1[25], str2[25];		//保存遍历结果，将前序和中序遍历的结果连接，得到一棵树的遍历结果
int size1, size2;				//保存在字符数组中，遍历得到的字符个数

char *pstr;  //当前正在遍历的字符串及其中字符个数
int *psize = NULL;

void PreOrder(Node *T) {
	pstr[(*psize)++] = T->c + '0';
	if (T->lchild)
		PreOrder(T->lchild);
	if (T->rchild)
		PreOrder(T->rchild);
}

void InOrder(Node *T) {
	if (T->lchild)
		InOrder(T->lchild);
	pstr[(*psize)++] = T->c + '0';
	if (T->rchild)
		InOrder(T->rchild);
}

Node *Insert(Node *T, int x) {
	if (T == NULL) {
		T = create();
		T->c = x;
		return T;
	}
	else if (T->c > x)
		T->lchild = Insert(T->lchild, x);
	else if (T->c < x)
		T->rchild = Insert(T->rchild, x);
	return T;
}

int main() {
	int n;
	char tmp[12];
	while (scanf("%d", &n) != EOF && n != 0) {
		loc = 0;
		Node *T = NULL;
		scanf("%s", tmp);
		for (int i = 0; tmp[i] != 0; i++)
			T = Insert(T, tmp[i] - '0');
		size1 = 0;
		pstr = str1;
		psize = &size1;
		PreOrder(T);
		InOrder(T);
		str1[size1] = 0;		//向第一个字符串的最后一个字符后添加空字符，方便使用字符串函数

		while (n-- != 0) {		//输入其他n个字符串
			scanf("%s", tmp);
			Node *T2 = NULL;
			for (int i = 0; tmp[i] != 0; i++)
				T2 = Insert(T2, tmp[i] - '0');
			size2 = 0;
			pstr = str2;
			psize = &size2;
			PreOrder(T2);
			InOrder(T2);
			str2[size2] = 0;
			puts(strcmp(str1, str2) == 0 ? "YES" : "NO");
		}
	}
	return 0;
}
```

